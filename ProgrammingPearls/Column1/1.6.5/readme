1.6.5
The programmer said that he had about a megabyte of free storage, but the code we sketched uses 1.25 megabytes. He was able to scrounge the extra space without much trouble.
If the megabyte had been a hard and fast boundary, what would you have recommended? What is the run time of your algorithm?
--
We are in the limit of optimizations. There's really nothing we can do to save more space. We are representing each number using one single bit!
The only solution is to use a 2-pass algorithm. 1 MB is the same as 8388608 bits, so we could read every integer between 0 and 8388607 (inclusive) in the first pass, and
print the sorted result. In the 2nd pass, we would read every integer between 8388608 and 9999999 (again, inclusive), and print the sorted result.

However, given that we must go through the file twice anyway, we can save more memory by splitting the input range into 2 equal halves. In the first pass, we will read every number
between 0 and 4,999,999 (inclusive) and in the second we read everything between 5,000,000 and 9,999,999 (again, inclusive). With this method, we only need to use 5,000,000 bits, which is roughly
610.4 KB.

Assuming there are n integers in the input file, the run time of our algorithm will be O(2n + 10,000,000), since we have to scan the file twice and traverse the whole array.
In theory, this can be reduced to O(n), but in practice, constant factors do matter. The resulting program uses very little memory and is an acceptable solution. Again, most of its time is
spend reading and writing.

There are a few implementation details to keep in mind. First, we cannot use scanf() and input redirection anymore, because we will need to go through the input twice. This forces us to
use file operations, so this new version will receive a filename as an argument in argv. Thus, the 2nd pass must begin by rewinding to the beginning of the file (by calling rewind()). Second, we need to be able
to reuse our bit vector macros for the 1st and 2nd passes. To do this, imagining we wanted to insert number x, and we are scanning from y to z, we will insert x-y in the bit vector, but when printing it, we
must print x+y. It may be easier to understand if you go and see the code.

Finally, it is important to remember to clear the array before going to the next pass.

This is a pretty elegant, straightforward solution with a nice trade off between space and time. Enjoy!
